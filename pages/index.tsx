import Head from 'next/head';
import React, { useEffect, useState } from 'react';
import styles from '../styles/Home.module.css';
import { getStravaAthlete, getStravaUrl } from './api/strava';
import { useRouter } from 'next/router';
import StarvaConnect from '../public/strava_connect.svg';
import PoweredByStrava from '../public/powered_by_strava.svg';

type Token = {
  expires_at: number;
  expires_in: number;
  refresh_token: string;
  access_token: string;
};

type User = {
  name: string;
  token: Token;
};

const Home = ({ stravaLoginUrl, stravaUser }: any) => {
  const [user] = useState<User>({
    name: stravaUser ? stravaUser.name : '',
    token: stravaUser ? stravaUser.token : '',
  });
  const [loading, setLoading] = useState<boolean>(false);
  const router = useRouter();

  console.log('Strava user:', stravaUser);

  useEffect(() => {
    // Remove query params
    router.push('/', undefined, { shallow: true });
  }, []);

  const login = () => {
    setLoading(true);
    location.href = stravaLoginUrl;
  };

  if (loading)
    return (
      <div>
        <h2>Loading...</h2>
      </div>
    );

  return (
    <div className={styles.container}>
      <Head>
        <title>Strava Segment Explorer</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h3 className={styles.title}>Welcome {user.name}</h3>
        <StravaLoginButton loginAction={() => login()} />
        <div>
          {`Site doesn't store any of your personal information from Strava. Close the tab or refresh and all information
          is gone.`}
        </div>
      </main>

      <footer style={{ width: '30%' }}>
        <PoweredByStrava />
      </footer>
    </div>
  );
};

const StravaLoginButton = ({ loginAction }: { loginAction: () => void }) => (
  <div onClick={(x) => loginAction()} style={{ cursor: 'pointer' }}>
    <StarvaConnect />
  </div>
);

export const getServerSideProps = async (context: any) => {
  const stravaLoginUrl = getStravaUrl();
  const stravaAthlete = context.query.code ? await getStravaAthlete(context.query.code.toString()) : null;
  const stravaUser: User | null = stravaAthlete
    ? {
        name: stravaAthlete.athlete.firstname,
        token: {
          expires_at: stravaAthlete.expires_at,
          expires_in: stravaAthlete.expires_in,
          access_token: stravaAthlete.access_token,
          refresh_token: stravaAthlete.refresh_token,
        },
      }
    : null;

  return {
    props: {
      stravaLoginUrl,
      stravaUser,
    },
  };
};

export default Home;
